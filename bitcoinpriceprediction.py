# -*- coding: utf-8 -*-
"""BitcoinPricePrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xtb2i6VBWD8so4iTMamfUeyjsVFzHp68

IMPORTING THE DEPENDENCIES
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler

"""COLLECTING DATA"""

data = pd.read_csv('BTC-USD.csv', date_parser = True)
data.tail()

"""SPLITTING TRAINING DATA

"""

data_training = data[data['Date']< '2021-11-02'].copy()
data_training

"""SPLITTING TEST DATA"""

data_test = data[data['Date']> '2021-11-02'].copy()
data_test

"""REMOVING UNNECESSARY COLUMNS"""

training_data = data_training.drop(['Date', 'Adj Close'], axis = 1)
training_data.head()

"""SCALING THE DATE USING MIN MAX SCALER, VALUE MIN - 0 MAX - 1"""

scaler = MinMaxScaler()
training_data = scaler.fit_transform(training_data)
training_data

"""TRAINING MODEL 


"""

X_train = []
Y_train = []

training_data.shape[0]

"""TRAINING DATASET SIZE 60 DAYS"""

for i in range(60, training_data.shape[0]):
    X_train.append(training_data[i-60:i])
    Y_train.append(training_data[i,0])

X_train, Y_train = np.array(X_train), np.array(Y_train)

X_train.shape

"""BUILDING LSTM - Long short term memory"""

from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense, LSTM, Dropout

"""50 units passed and activation function relu 

"""

regressor = Sequential()
regressor.add(LSTM(units = 50, activation = 'relu', return_sequences = True, input_shape = (X_train.shape[1], 5)))
regressor.add(Dropout(0.2))

"""LAYERING DATA

"""

regressor.add(LSTM(units = 60, activation = 'relu', return_sequences = True))
regressor.add(Dropout(0.3))

regressor.add(LSTM(units = 80, activation = 'relu', return_sequences = True))
regressor.add(Dropout(0.4))

regressor.add(LSTM(units = 120, activation = 'relu'))
regressor.add(Dropout(0.5))

regressor.add(Dense(units =1))

regressor.summary()

"""OPTIMIZER - ADAM OPTIMIZER

LOSS FUNCTION - mean_squared_error or mean_absolute_error

absolute error more accurate and interpretable
"""

regressor.compile(optimizer = 'adam', loss = 'mean_absolute_error')

"""ADJUST TO GET LOWER LOSS

"""

regressor.fit(X_train, Y_train, epochs = 20, batch_size =50)

"""CREATING TEST DATA"""

past_60_days = data_training.tail(60)
df= past_60_days.append(data_test, ignore_index = True)
df = df.drop(['Date', 'Adj Close'], axis = 1)
df.head()

inputs = scaler.transform(df)
inputs

"""TESTING DATA"""

X_test = []
Y_test = []
for i in range (60, inputs.shape[0]):
    X_test.append(inputs[i-60:i])
    Y_test.append(inputs[i, 0])

X_test, Y_test = np.array(X_test), np.array(Y_test)
X_test.shape, Y_test.shape

Y_pred = regressor.predict(X_test)
Y_pred, Y_test

"""VALUES SCALED DOWN DUE TO MIN MAX, REVERTING TO ACTUAL VALUE IS NESSASARY"""

scaler.scale_

"""PREDICTING THE PRICE"""

scale = 1/5.18164146e-05
scale

Y_test = Y_test*scale
Y_pred = Y_pred*scale

Y_pred

Y_test

"""GRAPH VISUALIZATUION - MATPLOTLIB"""

correlation = data.corr()
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='RdPu')

plt.figure(figsize=(14,5))
plt.plot(Y_test, color = 'red', label = 'Real Bitcoin Price')
plt.plot(Y_pred, color = 'green', label = 'Predicted Bitcoin Price')
plt.title('Bitcoin Price Prediction using RNN-LSTM')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.show()

